#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +---------------------------------------------------------------------+
# |     ____  ____   _____  ____  __  _____  __                         |
# |    |  _ \|  _ \ / _ \ \/ /  \/  |/ _ \ \/ /     _ ____   _____      |
# |    | |_) | |_) | | | \  /| |\/| | | | \  /_____| '_ \ \ / / _ \     |
# |    |  __/|  _ <| |_| /  \| |  | | |_| /  \_____| |_) \ V /  __/     |
# |    |_|   |_| \_\\___/_/\_\_|  |_|\___/_/\_\    | .__/ \_/ \___|     |
# |                                                |_|                  |
# |                                                                     |
# | Copyright Alejandro Olivan 2016                 alex@alexolivan.com |
# +---------------------------------------------------------------------+
# | A Check_mk agent to monitor PROXMOX PVE Hypervisor systems          |
# | This file contains the check definition / inventory code.           |
# +---------------------------------------------------------------------+
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301, USA.

# Example output from agent:
#<<<proxmox-pve>>>
#pve-version:
#proxmox-ve-2.6.32 3.4-174
#pve-manager 3.4-13
#pve-kernel-2.6.32-44-pve 2.6.32-173
#pve-kernel-2.6.32-45-pve 2.6.32-174
#lvm2 2.02.98-pve4
#clvm 2.02.98-pve4
#corosync-pve 1.4.7-1
#openais-pve 1.1.4-3
#libqb0 0.11.1-2
#redhat-cluster-pve 3.2.0-2
#resource-agents-pve 3.9.2-4
#fence-agents-pve 4.0.10-3
#pve-cluster 3.0-19
#qemu-server 3.4-8
#pve-firmware 1.1-5
#libpve-common-perl 3.0-26
#libpve-access-control 3.0-16
#libpve-storage-perl 3.0-34
#pve-libspice-server1 0.12.4-3
#vncterm 1.1-8
#vzctl 4.0-1pve6
#vzprocps 2.0.11-2
#vzquota 3.1-2
#pve-qemu-kvm 2.2-25
#ksm-control-daemon 1.1-1
#glusterfs-client 3.5.2-1
#cluster-status:
#Version 6.2.0
#Config-Version 9
#Cluster-Name ICCBroadcast
#Cluster-Id 35094
#Cluster-Member Yes
#Cluster-Generation 5024
#Membership-state Cluster-Member
#Nodes 5
#Expected-votes 5
#Total-votes 5
#Node-votes 1
#Quorum 3
#Active-subsystems 5
#Flags 
#Ports-Bound 0  
#Node-name calais02
#Node-ID 1
#Multicast-addresses 239.192.137.159 
#Node-addresses 172.16.0.5 
#local-status:
#stopped-vms 1
#running-vms 1
#stopped-vzs 0
#running-vzs 1
#stopped-lxcs 0
#running-lxcs 0

proxmox_agent_fields = (
    (
        'Nodes',
        'Expected-votes',
        'Total-votes',
        'Node-votes',
        'Quorum',
        'Active-subsystems'
    ),
    (
        'stopped-vms',
        'running-vms',
        'stopped-vzs',
        'running-vzs',
        'stopped-lxcs',
        'running-lxcs'
    )
)

factory_settings["proxmoxpve_default_values"] = {
    "Nodes" : (0,0),
    "Expected-votes" : (0,0),
    "Total-votes" : (0,0),
    "Node-votes" : (0,0),
    "Quorum" : (0,0),
    "Active-subsystems" : (0,0),
    "stopped-vms" : (0,0),
    "running-vms" : (0,0),
    "stopped-vzs" : (0,0),
    "running-vzs" : (0,0),
    "stopped-lxcs" : (0,0),
    "running-lxcs" : (0,0)
}



def proxmox_versions_parse(info):
    data = {}
    for line in info:
    	if line[0] == "pve-version:":
    	    continue
    	if line[0] == "cluster-status:":
    	    break
    	if len(line) >= 2:   
            data[line[0]] = line[1]
    return data


def proxmox_cluster_parse(info):
    data = {}
    readline = False
    for line in info:
    	if line[0] == "cluster-status:":
    	    readline = True
    	if line[0] == "local-status:":
    	    break
        if len(line) >= 2 and readline:
            data[line[0]] = line[1]
    return data


def proxmox_local_parse(info):
    data = {}
    readline = False
    for line in info:
    	if line[0] == "local-status:":
    	    readline = True
        if len(line) >= 2 and readline:
            data[line[0]] = line[1]
    return data    


def evaluate_scalar_value(item, value, valuewarn, valuecrit, message):
    if valuewarn != 0 or valuecrit != 0:
        perfdata = [(item, value, valuewarn, valuecrit)]
        if value > valuecrit:
            return 2, message % value, perfdata
        elif value > valuewarn:
            return 1, message % value, perfdata
        else:
            return 0, message % value, perfdata
    else:
        perfdata = [(item, value)]
        return 0, message % value, perfdata    


# +-------------------------------------------------------------------+
# |                                               _                   |
# |        _ ____   _____     __   _____ _ __ ___(_) ___  _ __        |
# |       | '_ \ \ / / _ \____\ \ / / _ \ '__/ __| |/ _ \| '_ \       |
# |      _| |_) \ V /  __/_____\ V /  __/ |  \__ \ | (_) | | | |      |
# |     (_) .__/ \_/ \___|      \_/ \___|_|  |___/_|\___/|_| |_|      |
# |       |_|                                                         |
# |                                                                   |
# +-------------------------------------------------------------------+
# | Check current PROXMOX PVE versions.                               |
# +-------------------------------------------------------------------+


def inventory_proxmoxpve_pveversion(info):
    data = proxmox_versions_parse(info)
    for item in data.keys():
        yield item, {}


def check_proxmoxpve_pveversion(item, params, info):
    data = proxmox_versions_parse(info)
    value = data[item]
    return 0, value


check_info["proxmoxpve.pveversion"] = {
    "check_function": check_proxmoxpve_pveversion,
    "inventory_function": inventory_proxmoxpve_pveversion,
    "service_description": "Proxmox PVE Versions",
    "has_perfdata": False,
    "group": "pve-version",
    "default_levels_variable": "proxmoxpve_default_values",
}


# +-------------------------------------------------------------------+
# |            _           _                 _        __              |
# |        ___| |_   _ ___| |_ ___ _ __     (_)_ __  / _| ___         |
# |       / __| | | | / __| __/ _ \ '__|____| | '_ \| |_ / _ \        |
# |      | (__| | |_| \__ \ ||  __/ | |_____| | | | |  _| (_) |       |
# |     (_)___|_|\__,_|___/\__\___|_|       |_|_| |_|_|  \___/        |
# |                                                                   |
# +-------------------------------------------------------------------+
# | Check current PROXMOX PVE Cluster Info.                           |
# +-------------------------------------------------------------------+


def inventory_proxmoxpve_clusterinfo(info):
    data = proxmox_cluster_parse(info)
    for item in data.keys():
        if item not in (proxmox_agent_fields[0]):
            yield item, {}


def check_proxmoxpve_clusterinfo(item, params, info):
    data = proxmox_cluster_parse(info)
    value = data[item]
    return 0, value


check_info["proxmoxpve.clusterinfo"] = {
    "check_function": check_proxmoxpve_clusterinfo,
    "inventory_function": inventory_proxmoxpve_clusterinfo,
    "service_description": "Proxmox PVE Cluster Info",
    "has_perfdata": False,
    "group": "pve-cluster-info",
    "default_levels_variable": "proxmoxpve_default_values",
}


# +-------------------------------------------------------------------+
# |        _           _                     _        _               |
# |    ___| |_   _ ___| |_ ___ _ __      ___| |_ __ _| |_ _   _ ___   |
# |   / __| | | | / __| __/ _ \ '__|____/ __| __/ _` | __| | | / __|  |
# |  | (__| | |_| \__ \ ||  __/ | |_____\__ \ || (_| | |_| |_| \__ \  |
# | (_)___|_|\__,_|___/\__\___|_|       |___/\__\__,_|\__|\__,_|___/  |
# |                                                                   |
# +-------------------------------------------------------------------+
# | Check current PROXMOX PVE Cluster Status values and counts.       |
# +-------------------------------------------------------------------+


def inventory_proxmoxpve_clusterstatus(info):
    data = proxmox_cluster_parse(info)
    for item in data.keys():
        if item in (proxmox_agent_fields[0]):
            yield item, {}


def check_proxmoxpve_clusterstatus(item, params, info):
    if type(params) != dict:
        params = { item : params }
    warn, crit = params[item]

    data = proxmox_cluster_parse(info)
    if item == proxmox_agent_fields[0][0]:
        value = int(data[item])
        message = "Cluster Nodes %d"
        return evaluate_scalar_value(item, value, warn, crit, message)
    elif item == proxmox_agent_fields[0][1]:
        value = int(data[item])
        message = "Expected votes %d"
        return evaluate_scalar_value(item, value, warn, crit, message)
    elif item == proxmox_agent_fields[0][2]:
        value = int(data[item])
        message = "Total votes %d"
        return evaluate_scalar_value(item, value, warn, crit, message)
    elif item == proxmox_agent_fields[0][3]:
        value = int(data[item])
        message = "Node votes %d"
        return evaluate_scalar_value(item, value, warn, crit, message)
    elif item == proxmox_agent_fields[0][4]:
        value = int(data[item])
        message = "Quorum value %d"
        return evaluate_scalar_value(item, value, warn, crit, message)
    elif item == proxmox_agent_fields[0][5]:
        value = int(data[item])
        message = "Active subsystems %d"
        return evaluate_scalar_value(item, value, warn, crit, message)        
    else:
        return 3, "UNKNOWN" 


check_info["proxmoxpve.clusterstatus"] = {
    "check_function": check_proxmoxpve_clusterstatus,
    "inventory_function": inventory_proxmoxpve_clusterstatus,
    "service_description": "Proxmox PVE Cluster Status",
    "has_perfdata": True,
    "group": "pve-cluster-status",
    "default_levels_variable": "proxmoxpve_default_values",
}


# +-------------------------------------------------------------------+
# |       _                 _           _        _                    |
# |      | | ___   ___ __ _| |      ___| |_ __ _| |_ _   _ ___        |
# |      | |/ _ \ / __/ _` | |_____/ __| __/ _` | __| | | / __|       |
# |     _| | (_) | (_| (_| | |_____\__ \ || (_| | |_| |_| \__ \       |
# |    (_)_|\___/ \___\__,_|_|     |___/\__\__,_|\__|\__,_|___/       |
# |                                                                   |
# +-------------------------------------------------------------------+
# | Check current PROXMOX PVE local Running instances status.         |
# +-------------------------------------------------------------------+


def inventory_proxmoxpve_localstatus(info):
    data = proxmox_local_parse(info)
    for item in data.keys():
        if item in (proxmox_agent_fields[1]):
            yield item, {}


def check_proxmoxpve_localstatus(item, params, info):
    if type(params) != dict:
        params = { item : params }
    warn, crit = params[item]

    data = proxmox_local_parse(info)
    if item == proxmox_agent_fields[1][0]:
        value = int(data[item])
        message = "Stopped Qemu VMs %d"
        return evaluate_scalar_value(item, value, warn, crit, message)
    elif item == proxmox_agent_fields[1][1]:
        value = int(data[item])
        message = "Running Qemu VMs %d"
        return evaluate_scalar_value(item, value, warn, crit, message)
    elif item == proxmox_agent_fields[1][2]:
        value = int(data[item])
        message = "Stopped OpenVZ containers %d"
        return evaluate_scalar_value(item, value, warn, crit, message)
    elif item == proxmox_agent_fields[1][3]:
        value = int(data[item])
        message = "Running OpenVZ containers %d"
        return evaluate_scalar_value(item, value, warn, crit, message)
    elif item == proxmox_agent_fields[1][4]:
        value = int(data[item])
        message = "Stopped LXC containers %d"
        return evaluate_scalar_value(item, value, warn, crit, message)
    elif item == proxmox_agent_fields[1][5]:
        value = int(data[item])
        message = "Running LXC containers %d"
        return evaluate_scalar_value(item, value, warn, crit, message)        
    else:
        return 3, "UNKNOWN" 


check_info["proxmoxpve.localstatus"] = {
    "check_function": check_proxmoxpve_localstatus,
    "inventory_function": inventory_proxmoxpve_localstatus,
    "service_description": "Proxmox PVE local running instances status",
    "has_perfdata": True,
    "group": "pve-local-status",
    "default_levels_variable": "proxmoxpve_default_values",
}