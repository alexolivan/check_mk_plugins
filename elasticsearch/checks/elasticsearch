#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +---------------------------------------------------------------------+
# |          _           _   _                              _           |
# |      ___| | __ _ ___| |_(_) ___ ___  ___  __ _ _ __ ___| |__        |
# |     / _ \ |/ _` / __| __| |/ __/ __|/ _ \/ _` | '__/ __| '_ \       |
# |    |  __/ | (_| \__ \ |_| | (__\__ \  __/ (_| | | | (__| | | |      |
# |     \___|_|\__,_|___/\__|_|\___|___/\___|\__,_|_|  \___|_| |_|      |
# |                                                                     |
# | Copyright Alejandro Olivan 2016                 alex@alexolivan.com |
# +---------------------------------------------------------------------+
# | A Check_mk plugin to monitor elasticsearch 1.4 on Debian systems    |
# | This file contains the check definition / inventory code.           |
# +---------------------------------------------------------------------+
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
# MA  02110-1301, USA.

# Example output from agent:
# <<<elasticsearch>>>
# cluster_name  MyFunnyCluster
# status  green
# timed_out  false
# number_of_nodes  44
# number_of_data_nodes  4
# active_primary_shards  1102
# active_shards  2204
# relocating_shards  0
# initializing_shards  0
# unassigned_shards  0



status_fields = (
    'cluster_name',
    'status',
    'timed_out',
    'number_of_nodes',
    'number_of_data_nodes',
    'active_primary_shards',
    'active_shards',
    'relocating_shards',
    'initializing_shards',
    'unassigned_shards'
)


def elasticsearch_parse(info):
    data = {}
    for line in info:
        data[line[0]] = line[1]
    return data


# +-------------------------------------------------------------------+
# |         _           _                                             |
# |     ___| |_   _ ___| |_ ___ _ __  _ __   __ _ _ __ ___   ___      |
# |    / __| | | | / __| __/ _ \ '__|| '_ \ / _` | '_ ` _ \ / _ \     |
# |   _|(__| | |_| \__ \ ||  __/ |   | | | | (_| | | | | | |  __/     |
# |  (_)___|_|\__,_|___/\__\___|_|___|_| |_|\__,_|_| |_| |_|\___|     |
# |                             |_____|                               |
# |                                                                   |
# +-------------------------------------------------------------------+
# | Check current elasticsearch cluster name.                         |
# +-------------------------------------------------------------------+


def inventory_elasticsearch_cluster_name(info):
    if info:
        return [(None, {})]


def check_elasticsearch_cluster_name(item, params, info):
    data = elasticsearch_parse(info)
    cluster_name = data[status_fields[0]]
    return 0, cluster_name


check_info["elasticsearch.cluster_name"] = {
    'check_function': check_elasticsearch_cluster_name,
    'inventory_function': inventory_elasticsearch_cluster_name,
    'service_description': 'Elasticsearch Cluster Name',
}


# +-------------------------------------------------------------------+
# |                       _        _                                  |
# |                   ___| |_ __ _| |_ _   _ ___                      |
# |                  / __| __/ _` | __| | | / __|                     |
# |                 _\__ \ || (_| | |_| |_| \__ \                     |
# |                (_)___/\__\__,_|\__|\__,_|___/                     |
# |                                                                   |
# +-------------------------------------------------------------------+
# | Check current elasticsearch cluster status items.                 |
# +-------------------------------------------------------------------+

def inventory_elasticsearch_status(info):
    data = elasticsearch_parse(info)
    for item in data.keys():
        if item in (status_fields[1], status_fields[2]):
            yield item, None


def check_elasticsearch_status(item, params, info):
    data = elasticsearch_parse(info)
    if item == status_fields[1]:
        color = data[item]
        if color == "green":
            return 0, "%s" % color
        elif color == "yellow":
            return 1, "%s" % color
        elif color == "red":
            return 2, "%s" % color
        else:
            return 3, "UNKNOWN"
    elif item == status_fields[2]:
        if data[item] == "false":
            return 0, "online"
        else:
            return 2, "timed out"
    else:
        return 3, "UNKNOWN"


check_info["elasticsearch.status"] = {
    'check_function': check_elasticsearch_status,
    'inventory_function': inventory_elasticsearch_status,
    'service_description': 'Elasticsearch Status',
}


# +-------------------------------------------------------------------+
# |                                  _                                |
# |                  _ __   ___   __| | ___  ___                      |
# |                 | '_ \ / _ \ / _` |/ _ \/ __|                     |
# |                _| | | | (_) | (_| |  __/\__ \                     |
# |               (_)_| |_|\___/ \__,_|\___||___/                     |
# |                                                                   |
# +-------------------------------------------------------------------+
# | Check current elasticsearch cluster nodes status info.            |
# +-------------------------------------------------------------------+

def inventory_elasticsearch_nodes(info):
    data = elasticsearch_parse(info)
    for item in data.keys():
        if item in (status_fields[3], status_fields[4]):
            yield item, None


def check_elasticsearch_nodes(item, params, info):
    data = elasticsearch_parse(info)
    value = int(data[item])
    perfdata = [(item, data[item])]
    if item == status_fields[3]:
        return 0, "number of nodes: %d" % value, perfdata
    elif item == status_fields[4]:
        return 0, "number of data nodes: %d" % value, perfdata
    else:
        return 3, "UNKNOWN"


check_info["elasticsearch.nodes"] = {
    'check_function': check_elasticsearch_nodes,
    'inventory_function': inventory_elasticsearch_nodes,
    'service_description': 'Elasticsearch Nodes',
    'has_perfdata': True,
}


# +-------------------------------------------------------------------+
# |                      _                   _                        |
# |                  ___| |__   __ _ _ __ __| |___                    |
# |                 / __| '_ \ / _` | '__/ _` / __|                   |
# |                _\__ \ | | | (_| | | | (_| \__ \                   |
# |               (_)___/_| |_|\__,_|_|  \__,_|___/                   |
# |                                                                   |
# |                                                                   |
# +-------------------------------------------------------------------+
# | Check current elasticsearch cluster shards status info.           |
# +-------------------------------------------------------------------+

def inventory_elasticsearch_shards(info):
    data = elasticsearch_parse(info)
    for item in data.keys():
        if item in (
                status_fields[5],
                status_fields[6],
                status_fields[7],
                status_fields[8],
                status_fields[9]
        ):
            yield item, None


def check_elasticsearch_shards(item, params, info):
    data = elasticsearch_parse(info)
    value = int(data[item])
    perfdata = [(item, data[item])]
    if item == status_fields[5]:
        return 0, "active primary shards: %d" % value, perfdata
    elif item == status_fields[6]:
        return 0, "active shards: %d" % value, perfdata
    elif item == status_fields[7]:
        if value > 0:
            return 1, "relocating shards: %d" % value, perfdata
        else:
            return 0, "relocating shards: %d" % value, perfdata
    elif item == status_fields[8]:
        if value > 0:
            return 1, "initializing shards: %d" % value, perfdata
        else:
            return 0, "initializing shards: %d" % value, perfdata
    elif item == status_fields[9]:
        if value > 0:
            return 2, "unassigned shards: %d" % value, perfdata
        else:
            return 0, "unassigned shards: %d" % value, perfdata
    else:
        return 3, "UNKNOWN"


check_info["elasticsearch.shards"] = {
    'check_function': check_elasticsearch_shards,
    'inventory_function': inventory_elasticsearch_shards,
    'service_description': 'Elasticsearch Shards',
    'has_perfdata': True,
}
