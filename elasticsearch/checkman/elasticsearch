title: elasticsearch
agents: linux (just tested on Debian Linux)
catalog: "app","Applications"
license: GPL
distribution:

description:
 This plugin is intended to moniter the status of an elasticsearch instance.
 It analyzes elasticsearch http json reply that informs about cluster status.
 It works nicelly with elasticsearch 1.4.5 on Debian 8.
 
 The plugin includes separate checks to cluster name, cluster status, 
 cluster node report, and cluster shards status.

 Agent will examine through 'netstat' command listening TCP sockets on 9200.
 Upon positive match, agent will use 'curl' command to fetch and early parse 
 output data.

 URL used by the agent is http://somehost:9200/_cluster/health?pretty=true

 Resulting in a json document like this one:
 {
   "cluster_name" : "MyFunnyCluster",
   "status" : "green",
   "timed_out" : false,
   "number_of_nodes" : 44,
   "number_of_data_nodes" : 4,
   "active_primary_shards" : 1102,
   "active_shards" : 2204,
   "relocating_shards" : 0,
   "initializing_shards" : 0,
   "unassigned_shards" : 0
 }

 That is simplified by agent to a set of plain text key value lines like this:
 <<<elasticsearch>>>
 cluster_name  MyFunnyCluster
 status  green
 timed_out  false
 number_of_nodes  44
 number_of_data_nodes  4
 active_primary_shards  1102
 active_shards  2204
 relocating_shards  0
 initializing_shards  0
 unassigned_shards  0

 General Status of the cluster is mapped from elasticsearch color system to
 check_mk values as:
 'red' for CRIT, 'yellow' for WARN, 'green' for 'OK'
 Also, following elasticsearch's criteria, check resulting in a value for
 unasigned shards grater than 0 is considered 'red' and therefore returns 
 CRIT.
 Equally, shard reassignation in cluster, i.e value for reallocatig shards 
 greater than 0, is considered a 'yellow' cluster state, and thus it returns
 WARN.



title: elasticsearch.cluster_name
description:
 This check checks Cluster to which node is assigned to by its cluster name

item:
 Single 'cluster_name' item.

examples:
 no configuration needed.

perfdata:
 no perfdta is generated.

inventory:
 inventory funtion parses agent key - value multile output, parsed from json
 reply into a dict.
 here we look for the single 'cluster_name' key for a None inventorization.

[parameters]
no parameters needed.

[configuration]
no configuration needed.



title: elasticsearch.status
description:
 This check checks Cluster's reported health and node connectivity

item:
 'status' item return elasticsearch cluster state color string.
 'timed_out' item states connection time_out state of node. 

examples:
 no configuration needed.

perfdata:
 no perfdta is generated.

inventory:
 inventory funtion parses agent key - value multile output, parsed from json
 reply into a dict.
 here we look for 'status' and 'tiemd_out' keys to yeld a None type inventorization.

[parameters]
no parameters needed.

[configuration]
no configuration needed.



title: elasticsearch.nodes
description:
 This check checks the node count currently in service in the cluster

item:
 'number_of_nodes' an int value stating the total amount of nodes of all classes.
 'number_of_data_nodes' an int value with the total data type nodes in service.

examples:
 no configuration needed.

perfdata:
 A simplistic perfadata with neither warns nor limits is setup for each item, 
 since values here are just for information.

inventory:
 inventory funtion parses agent key - value multile output, parsed from json
 reply into a dict.
 here we look for 'number_of_data_nodes' and 'number_of_nodes' keys to yeld 
 a None type inventorization.

[parameters]
no parameters needed.

[configuration]
no configuration needed.



title: elasticsearch.shards
description:
 This check checks shards accounting on the cluster.

item:
 'active_shards' an int value stating current active shards in cluster.
 'initializing_shards' an int value stating iniitalizating new shards.
 'relocating_shards' an int value stating shards being reallocated.
 'unasigned_shards' an int value stating shards in an unusable state.

examples:
 no configuration needed.

perfdata:
 A simplistic perfadata with neither warns nor limits is setup for item, 
 since values here are just for information. 

inventory:
 inventory funtion parses agent key - value multile output, parsed from json
 reply into a dict.
 here we look for 'active_shards', 'initializing_shards', 'relocating_shards'
 and 'unasigned_shards' keys to yeld a None type inventorization.

[parameters]
no parameters needed.

[configuration]
no configuration needed.        